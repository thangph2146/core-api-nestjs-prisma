generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  password  String
  role      Role       @default(USER)
  bio       String?
  avatar    String?
  emailVerified Boolean  @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  comments  Comment[]
  posts     Post[]
  userRoles UserRole[]
  sessions  Session[]
  parent    Parent?

  @@map("users")
}

model Post {
  id          String         @id @default(cuid())
  title       String
  content     Json
  excerpt     String?
  slug        String         @unique
  image       String?
  published   Boolean        @default(false)
  publishedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  authorId    String
  comments    Comment[]
  categories  PostCategory[]
  tags        PostTag[]
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Category {
  id          String         @id @default(cuid())
  name        String         @unique
  slug        String         @unique
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  posts       PostCategory[]

  @@map("categories")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  posts     PostTag[]

  @@map("tags")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  approved  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  authorId  String
  postId    String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model PostCategory {
  postId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@map("post_categories")
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model RoleModel {
  id              String           @id @default(cuid())
  name            String           @unique
  displayName     String
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  displayName     String
  description     String?
  resource        String
  action          String
  pathPattern     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  rolePermissions RolePermission[]

  @@map("permissions")
}

model UserRole {
  id     String    @id @default(cuid())
  userId String
  roleId String
  role   RoleModel @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         RoleModel  @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  accessToken  String   @unique
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Parent {
  id            String          @id @default(cuid())
  userId        String?         @unique
  fullName      String
  phone         String          @unique
  email         String          @unique
  address       String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  user          User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  students      Student[]
  messagesSent  Message[]       @relation("MessageSender")
  messagesReceived Message[]    @relation("MessageReceiver")

  @@map("parents")
}

model Student {
  id              String           @id @default(cuid())
  parentId        String
  fullName        String
  dateOfBirth     DateTime
  gender          Gender
  studentCode     String           @unique
  className       String?
  grade           String?
  avatar          String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  parent          Parent           @relation(fields: [parentId], references: [id], onDelete: Cascade)
  academicResults AcademicResult[]

  @@map("students")
}

model AcademicResult {
  id          String   @id @default(cuid())
  studentId   String
  subject     String
  semester    String
  year        Int
  score       Float
  grade       String?
  notes       String?
  teacherName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("academic_results")
}

model Message {
  id         String      @id @default(cuid())
  senderId   String?
  receiverId String
  subject    String
  content    String      @db.Text
  isRead     Boolean     @default(false)
  type       MessageType @default(NOTIFICATION)
  priority   Priority    @default(NORMAL)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  sender     Parent?     @relation("MessageSender", fields: [senderId], references: [id], onDelete: SetNull)
  receiver   Parent      @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  EDITOR
  USER
  PARENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MessageType {
  NOTIFICATION
  ANNOUNCEMENT
  PERSONAL
  SYSTEM
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}
