import { PrismaClient, Role } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

// Sample content data ph√π h·ª£p v·ªõi Lexical Editor
const samplePostContent = {
  root: {
    children: [
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "Ch√†o m·ª´ng ƒë·∫øn v·ªõi Content Editor! üöÄ",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "heading",
        tag: "h1",
        version: 1,
      },
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "ƒê√¢y l√† m·ªôt b√†i vi·∫øt m·∫´u ƒë∆∞·ª£c t·∫°o b·ªüi seed script. N·ªôi dung n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi Lexical Editor ƒë∆∞·ª£c s·ª≠ d·ª•ng trong core-cms.",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "paragraph",
        version: 1,
      },
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "T√≠nh nƒÉng ch√≠nh c·ªßa Content Editor:",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "heading",
        tag: "h2",
        version: 1,
      },
      {
        children: [
          {
            children: [
              {
                children: [
                  {
                    detail: 0,
                    format: 0,
                    mode: "normal",
                    style: "",
                    text: "WYSIWYG Editor v·ªõi Lexical",
                    type: "text",
                    version: 1,
                  },
                ],
                direction: "ltr",
                format: "",
                indent: 0,
                type: "listitem",
                version: 1,
              },
              {
                children: [
                  {
                    detail: 0,
                    format: 0,
                    mode: "normal",
                    style: "",
                    text: "H·ªó tr·ª£ nhi·ªÅu ƒë·ªãnh d·∫°ng vƒÉn b·∫£n",
                    type: "text",
                    version: 1,
                  },
                ],
                direction: "ltr",
                format: "",
                indent: 0,
                type: "listitem",
                version: 1,
              },
              {
                children: [
                  {
                    detail: 0,
                    format: 0,
                    mode: "normal",
                    style: "",
                    text: "T√≠ch h·ª£p h√¨nh ·∫£nh v√† media",
                    type: "text",
                    version: 1,
                  },
                ],
                direction: "ltr",
                format: "",
                indent: 0,
                type: "listitem",
                version: 1,
              },
              {
                children: [
                  {
                    detail: 0,
                    format: 0,
                    mode: "normal",
                    style: "",
                    text: "Qu·∫£n l√Ω categories v√† tags",
                    type: "text",
                    version: 1,
                  },
                ],
                direction: "ltr",
                format: "",
                indent: 0,
                type: "listitem",
                version: 1,
              },
            ],
            direction: "ltr",
            format: "",
            indent: 0,
            type: "list",
            listType: "bullet",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "paragraph",
        version: 1,
      },
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "H·ªá th·ªëng ƒë∆∞·ª£c x√¢y d·ª±ng v·ªõi NestJS v√† Prisma, ƒë·∫£m b·∫£o hi·ªáu su·∫•t cao v√† d·ªÖ b·∫£o tr√¨.",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "paragraph",
        version: 1,
      },
    ],
    direction: "ltr",
    format: "",
    indent: 0,
    type: "root",
    version: 1,
  },
};

const samplePostContent2 = {
  root: {
    children: [
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Content Editor",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "heading",
        tag: "h1",
        version: 1,
      },
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "Trong b√†i vi·∫øt n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng Content Editor m·ªôt c√°ch hi·ªáu qu·∫£ nh·∫•t.",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "paragraph",
        version: 1,
      },
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "B∆∞·ªõc 1: T·∫°o n·ªôi dung m·ªõi",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "heading",
        tag: "h2",
        version: 1,
      },
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "ƒê·ªÉ t·∫°o n·ªôi dung m·ªõi, b·∫°n c·∫ßn truy c·∫≠p v√†o trang editor v√† b·∫Øt ƒë·∫ßu nh·∫≠p n·ªôi dung. S·ª≠ d·ª•ng thanh c√¥ng c·ª• ƒë·ªÉ ƒë·ªãnh d·∫°ng vƒÉn b·∫£n theo √Ω mu·ªën.",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "paragraph",
        version: 1,
      },
    ],
    direction: "ltr",
    format: "",
    indent: 0,
    type: "root",
    version: 1,
  },
};

async function main() {
  console.log('üå± B·∫Øt ƒë·∫ßu seed database...');

  // T·∫°o users
  const hashedPassword = await bcrypt.hash('password123', 10);
  
  const adminUser = await prisma.user.upsert({
    where: { email: 'admin@phgroup.com' },
    update: {},
    create: {
      email: 'admin@phgroup.com',
      name: 'PHGroup Admin',
      password: hashedPassword,
      role: Role.SUPER_ADMIN,
    },
  });

  const editorUser = await prisma.user.upsert({
    where: { email: 'editor@phgroup.com' },
    update: {},
    create: {
      email: 'editor@phgroup.com',
      name: 'PHGroup Editor',
      password: hashedPassword,
      role: Role.EDITOR,
    },
  });

  const authorUser = await prisma.user.upsert({
    where: { email: 'author@phgroup.com' },
    update: {},
    create: {
      email: 'author@phgroup.com',
      name: 'PHGroup Author',
      password: hashedPassword,
      role: Role.USER,
    },
  });

  console.log('‚úÖ ƒê√£ t·∫°o users');

  // T·∫°o categories
  const categories = await Promise.all([
    prisma.category.upsert({
      where: { slug: 'huong-dan' },
      update: {},
      create: {
        name: 'H∆∞·ªõng d·∫´n',
        slug: 'huong-dan',
        description: 'C√°c b√†i vi·∫øt h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng',
      },
    }),
    prisma.category.upsert({
      where: { slug: 'cong-nghe' },
      update: {},
      create: {
        name: 'C√¥ng ngh·ªá',
        slug: 'cong-nghe',
        description: 'Tin t·ª©c v√† xu h∆∞·ªõng c√¥ng ngh·ªá',
      },
    }),
    prisma.category.upsert({
      where: { slug: 'seo' },
      update: {},
      create: {
        name: 'SEO',
        slug: 'seo',
        description: 'T·ªëi ∆∞u h√≥a c√¥ng c·ª• t√¨m ki·∫øm',
      },
    }),
    prisma.category.upsert({
      where: { slug: 'ui-ux' },
      update: {},
      create: {
        name: 'UI/UX',
        slug: 'ui-ux',
        description: 'Thi·∫øt k·∫ø giao di·ªán v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng',
      },
    }),
  ]);

  console.log('‚úÖ ƒê√£ t·∫°o categories');

  // T·∫°o tags
  const tags = await Promise.all([
    prisma.tag.upsert({
      where: { slug: 'content-editor' },
      update: {},
      create: {
        name: 'Content Editor',
        slug: 'content-editor',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'wysiwyg' },
      update: {},
      create: {
        name: 'WYSIWYG',
        slug: 'wysiwyg',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'lexical' },
      update: {},
      create: {
        name: 'Lexical',
        slug: 'lexical',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'react' },
      update: {},
      create: {
        name: 'React',
        slug: 'react',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'nextjs' },
      update: {},
      create: {
        name: 'Next.js',
        slug: 'nextjs',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'typescript' },
      update: {},
      create: {
        name: 'TypeScript',
        slug: 'typescript',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'nestjs' },
      update: {},
      create: {
        name: 'NestJS',
        slug: 'nestjs',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'prisma' },
      update: {},
      create: {
        name: 'Prisma',
        slug: 'prisma',
      },
    }),
  ]);

  console.log('‚úÖ ƒê√£ t·∫°o tags');

  // T·∫°o posts
  const post1 = await prisma.post.upsert({
    where: { slug: 'chao-mung-den-voi-content-editor' },
    update: {},
    create: {
      title: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Content Editor! üöÄ',
      content: samplePostContent,
      excerpt: 'ƒê√¢y l√† m·ªôt b√†i vi·∫øt m·∫´u ƒë∆∞·ª£c t·∫°o b·ªüi seed script. N·ªôi dung n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi Lexical Editor ƒë∆∞·ª£c s·ª≠ d·ª•ng trong core-cms.',
      slug: 'chao-mung-den-voi-content-editor',
      image: 'https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=800&h=400&fit=crop',
      published: true,
      publishedAt: new Date(),
      authorId: adminUser.id,
    },
  });

  const post2 = await prisma.post.upsert({
    where: { slug: 'huong-dan-su-dung-content-editor' },
    update: {},
    create: {
      title: 'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Content Editor',
      content: samplePostContent2,
      excerpt: 'Trong b√†i vi·∫øt n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng Content Editor m·ªôt c√°ch hi·ªáu qu·∫£ nh·∫•t.',
      slug: 'huong-dan-su-dung-content-editor',
      image: 'https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&h=400&fit=crop',
      published: true,
      publishedAt: new Date(),
      authorId: editorUser.id,
    },
  });

  const post3 = await prisma.post.upsert({
    where: { slug: 'tich-hop-lexical-voi-nestjs' },
    update: {},
    create: {
      title: 'T√≠ch h·ª£p Lexical v·ªõi NestJS v√† Prisma',
      content: samplePostContent,
      excerpt: 'H∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ c√°ch t√≠ch h·ª£p Lexical Editor v·ªõi NestJS backend v√† Prisma ORM.',
      slug: 'tich-hop-lexical-voi-nestjs',
      image: 'https://images.unsplash.com/photo-1551650975-87deedd944c3?w=800&h=400&fit=crop',
      published: true,
      authorId: authorUser.id,
    },
  });

  console.log('‚úÖ ƒê√£ t·∫°o posts');

  // Li√™n k·∫øt posts v·ªõi categories
  await prisma.postCategory.createMany({
    data: [
      { postId: post1.id, categoryId: categories[0].id }, // H∆∞·ªõng d·∫´n
      { postId: post1.id, categoryId: categories[1].id }, // C√¥ng ngh·ªá
      { postId: post2.id, categoryId: categories[0].id }, // H∆∞·ªõng d·∫´n
      { postId: post3.id, categoryId: categories[1].id }, // C√¥ng ngh·ªá
    ],
    skipDuplicates: true,
  });

  // Li√™n k·∫øt posts v·ªõi tags
  await prisma.postTag.createMany({
    data: [
      { postId: post1.id, tagId: tags[0].id }, // Content Editor
      { postId: post1.id, tagId: tags[1].id }, // WYSIWYG
      { postId: post1.id, tagId: tags[2].id }, // Lexical
      { postId: post1.id, tagId: tags[3].id }, // React
      { postId: post2.id, tagId: tags[0].id }, // Content Editor
      { postId: post2.id, tagId: tags[1].id }, // WYSIWYG
      { postId: post3.id, tagId: tags[2].id }, // Lexical
      { postId: post3.id, tagId: tags[6].id }, // NestJS
      { postId: post3.id, tagId: tags[7].id }, // Prisma
    ],
    skipDuplicates: true,
  });

  console.log('‚úÖ ƒê√£ li√™n k·∫øt posts v·ªõi categories v√† tags');

  // T·∫°o comments
  await prisma.comment.createMany({
    data: [
      {
        content: 'B√†i vi·∫øt r·∫•t hay v√† h·ªØu √≠ch! C·∫£m ∆°n t√°c gi·∫£ ƒë√£ chia s·∫ª.',
        approved: true,
        authorId: authorUser.id,
        postId: post1.id,
      },
      {
        content: 'T√¥i ƒë√£ th·ª≠ v√† th·∫•y r·∫•t d·ªÖ s·ª≠ d·ª•ng. Recommend cho m·ªçi ng∆∞·ªùi!',
        approved: true,
        authorId: editorUser.id,
        postId: post1.id,
      },
      {
        content: 'C√≥ th·ªÉ chia s·∫ª th√™m v·ªÅ c√°ch customize editor kh√¥ng?',
        approved: false,
        authorId: authorUser.id,
        postId: post2.id,
      },
    ],
  });

  console.log('‚úÖ ƒê√£ t·∫°o comments');

  console.log('üéâ Seed database ho√†n th√†nh!');
  console.log('\nüìä Th·ªëng k√™:');
  console.log(`- Users: 3 (1 Super Admin, 1 Editor, 1 User)`);
  console.log(`- Categories: ${categories.length}`);
  console.log(`- Tags: ${tags.length}`);
  console.log(`- Posts: 3 (2 published, 1 draft)`);
  console.log(`- Comments: 3 (2 approved, 1 pending)`);
  console.log('\nüîë Th√¥ng tin ƒëƒÉng nh·∫≠p:');
  console.log('Email: admin@phgroup.com | Password: password123');
  console.log('Email: editor@phgroup.com | Password: password123');
  console.log('Email: author@phgroup.com | Password: password123');
}

main()
  .catch((e) => {
    console.error('‚ùå L·ªói khi seed database:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
