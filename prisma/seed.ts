import {
  PrismaClient,
  Role,
  Gender,
  MessageType,
  Priority,
} from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

// Sample content data ph√π h·ª£p v·ªõi Lexical Editor
const samplePostContent = {
  root: {
    children: [
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "Ch√†o m·ª´ng ƒë·∫øn v·ªõi Content Editor! üöÄ",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "heading",
        tag: "h1",
        version: 1,
      },
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "ƒê√¢y l√† m·ªôt b√†i vi·∫øt m·∫´u ƒë∆∞·ª£c t·∫°o b·ªüi seed script. N·ªôi dung n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi Lexical Editor ƒë∆∞·ª£c s·ª≠ d·ª•ng trong core-cms.",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "paragraph",
        version: 1,
      },
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "T√≠nh nƒÉng ch√≠nh c·ªßa Content Editor:",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "heading",
        tag: "h2",
        version: 1,
      },
      {
        children: [
          {
            children: [
              {
                children: [
                  {
                    detail: 0,
                    format: 0,
                    mode: "normal",
                    style: "",
                    text: "WYSIWYG Editor v·ªõi Lexical",
                    type: "text",
                    version: 1,
                  },
                ],
                direction: "ltr",
                format: "",
                indent: 0,
                type: "listitem",
                version: 1,
              },
              {
                children: [
                  {
                    detail: 0,
                    format: 0,
                    mode: "normal",
                    style: "",
                    text: "H·ªó tr·ª£ nhi·ªÅu ƒë·ªãnh d·∫°ng vƒÉn b·∫£n",
                    type: "text",
                    version: 1,
                  },
                ],
                direction: "ltr",
                format: "",
                indent: 0,
                type: "listitem",
                version: 1,
              },
              {
                children: [
                  {
                    detail: 0,
                    format: 0,
                    mode: "normal",
                    style: "",
                    text: "T√≠ch h·ª£p h√¨nh ·∫£nh v√† media",
                    type: "text",
                    version: 1,
                  },
                ],
                direction: "ltr",
                format: "",
                indent: 0,
                type: "listitem",
                version: 1,
              },
              {
                children: [
                  {
                    detail: 0,
                    format: 0,
                    mode: "normal",
                    style: "",
                    text: "Qu·∫£n l√Ω categories v√† tags",
                    type: "text",
                    version: 1,
                  },
                ],
                direction: "ltr",
                format: "",
                indent: 0,
                type: "listitem",
                version: 1,
              },
            ],
            direction: "ltr",
            format: "",
            indent: 0,
            type: "list",
            listType: "bullet",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "paragraph",
        version: 1,
      },
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "H·ªá th·ªëng ƒë∆∞·ª£c x√¢y d·ª±ng v·ªõi NestJS v√† Prisma, ƒë·∫£m b·∫£o hi·ªáu su·∫•t cao v√† d·ªÖ b·∫£o tr√¨.",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "paragraph",
        version: 1,
      },
    ],
    direction: "ltr",
    format: "",
    indent: 0,
    type: "root",
    version: 1,
  },
};

const samplePostContent2 = {
  root: {
    children: [
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Content Editor",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "heading",
        tag: "h1",
        version: 1,
      },
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "Trong b√†i vi·∫øt n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng Content Editor m·ªôt c√°ch hi·ªáu qu·∫£ nh·∫•t.",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "paragraph",
        version: 1,
      },
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "B∆∞·ªõc 1: T·∫°o n·ªôi dung m·ªõi",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "heading",
        tag: "h2",
        version: 1,
      },
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "ƒê·ªÉ t·∫°o n·ªôi dung m·ªõi, b·∫°n c·∫ßn truy c·∫≠p v√†o trang editor v√† b·∫Øt ƒë·∫ßu nh·∫≠p n·ªôi dung. S·ª≠ d·ª•ng thanh c√¥ng c·ª• ƒë·ªÉ ƒë·ªãnh d·∫°ng vƒÉn b·∫£n theo √Ω mu·ªën.",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "paragraph",
        version: 1,
      },
    ],
    direction: "ltr",
    format: "",
    indent: 0,
    type: "root",
    version: 1,
  },
};

type PermissionActionSpec = {
  action: string;
  roles: Role[];
  path?: string;
  displayName?: string;
  description?: string;
};

type PermissionResourceSpec = {
  resource: string;
  label: string;
  description: string;
  basePath: string;
  detailPath?: string;
  newPath?: string;
  actions: PermissionActionSpec[];
};

type PermissionSeedDefinition = {
  name: string;
  displayName: string;
  description: string;
  resource: string;
  action: string;
  pathPattern: string;
  roles: Role[];
};

const ROLE_SETS: Record<string, Role[]> = {
  all: [Role.USER, Role.ADMIN, Role.EDITOR, Role.SUPER_ADMIN],
  adminAndSuper: [Role.ADMIN, Role.SUPER_ADMIN],
  editorial: [Role.ADMIN, Role.EDITOR, Role.SUPER_ADMIN],
  superOnly: [Role.SUPER_ADMIN],
};

const ACTION_METADATA: Record<string, { label: string; description: string }> = {
  view: { label: "Xem", description: "Cho ph√©p xem {resource}." },
  create: { label: "T·∫°o", description: "Cho ph√©p t·∫°o {resource}." },
  update: { label: "C·∫≠p nh·∫≠t", description: "Cho ph√©p c·∫≠p nh·∫≠t {resource}." },
  delete: {
    label: "X√≥a",
    description: "Cho ph√©p x√≥a {resource} (soft delete).",
  },
  restore: {
    label: "Kh√¥i ph·ª•c",
    description: "Cho ph√©p kh√¥i ph·ª•c {resource}.",
  },
  "hard-delete": {
    label: "X√≥a vƒ©nh vi·ªÖn",
    description: "Cho ph√©p x√≥a vƒ©nh vi·ªÖn {resource}.",
  },
  "bulk-delete": {
    label: "X√≥a h√†ng lo·∫°t",
    description: "Cho ph√©p x√≥a nhi·ªÅu {resource} c√πng l√∫c.",
  },
  "bulk-restore": {
    label: "Kh√¥i ph·ª•c h√†ng lo·∫°t",
    description: "Cho ph√©p kh√¥i ph·ª•c nhi·ªÅu {resource} c√πng l√∫c.",
  },
  "bulk-hard-delete": {
    label: "X√≥a vƒ©nh vi·ªÖn h√†ng lo·∫°t",
    description: "Cho ph√©p x√≥a vƒ©nh vi·ªÖn nhi·ªÅu {resource} c√πng l√∫c.",
  },
  publish: {
    label: "Xu·∫•t b·∫£n",
    description: "Cho ph√©p xu·∫•t b·∫£n {resource}.",
  },
  analytics: {
    label: "Xem ph√¢n t√≠ch",
    description: "Cho ph√©p xem d·ªØ li·ªáu ph√¢n t√≠ch c·ªßa {resource}.",
  },
  system: {
    label: "Qu·∫£n l√Ω c·∫•u h√¨nh",
    description: "Cho ph√©p c·∫•u h√¨nh h·ªá th·ªëng n√¢ng cao.",
  },
  security: {
    label: "Qu·∫£n l√Ω b·∫£o m·∫≠t",
    description: "Cho ph√©p c·∫•u h√¨nh c√°c thi·∫øt l·∫≠p b·∫£o m·∫≠t.",
  },
  "change-password": {
    label: "ƒê·ªïi m·∫≠t kh·∫©u",
    description: "Cho ph√©p ƒë·ªïi m·∫≠t kh·∫©u t√†i kho·∫£n.",
  },
  "upload-avatar": {
    label: "C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán",
    description: "Cho ph√©p c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán t√†i kho·∫£n.",
  },
  "manage-subscriptions": {
    label: "Qu·∫£n l√Ω ƒëƒÉng k√Ω",
    description: "Cho ph√©p qu·∫£n l√Ω g√≥i ƒëƒÉng k√Ω v√† thanh to√°n.",
  },
  "view-invoices": {
    label: "Xem h√≥a ƒë∆°n",
    description: "Cho ph√©p xem h√≥a ƒë∆°n v√† l·ªãch s·ª≠ thanh to√°n.",
  },
  manage: {
    label: "Qu·∫£n l√Ω",
    description: "Cho ph√©p qu·∫£n l√Ω {resource}.",
  },
  request: {
    label: "G·ª≠i y√™u c·∫ßu",
    description: "Cho ph√©p g·ª≠i y√™u c·∫ßu li√™n quan ƒë·∫øn {resource}.",
  },
  "mark-read": {
    label: "ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc",
    description: "Cho ph√©p ƒë√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc.",
  },
  revoke: {
    label: "Thu h·ªìi",
    description: "Cho ph√©p thu h·ªìi {resource}.",
  },
  "revoke-all": {
    label: "Thu h·ªìi t·∫•t c·∫£",
    description: "Cho ph√©p thu h·ªìi t·∫•t c·∫£ {resource}.",
  },
  moderate: {
    label: "Ki·ªÉm duy·ªát",
    description: "Cho ph√©p ki·ªÉm duy·ªát {resource}.",
  },
  approve: {
    label: "Ph√™ duy·ªát",
    description: "Cho ph√©p ph√™ duy·ªát {resource}.",
  },
  reject: {
    label: "T·ª´ ch·ªëi",
    description: "Cho ph√©p t·ª´ ch·ªëi {resource}.",
  },
  "bulk-approve": {
    label: "Ph√™ duy·ªát h√†ng lo·∫°t",
    description: "Cho ph√©p ph√™ duy·ªát h√†ng lo·∫°t {resource}.",
  },
  "bulk-reject": {
    label: "T·ª´ ch·ªëi h√†ng lo·∫°t",
    description: "Cho ph√©p t·ª´ ch·ªëi h√†ng lo·∫°t {resource}.",
  },
  "assign-role": {
    label: "G√°n vai tr√≤",
    description: "Cho ph√©p g√°n vai tr√≤ cho ng∆∞·ªùi d√πng.",
  },
  "revoke-role": {
    label: "Thu h·ªìi vai tr√≤",
    description: "Cho ph√©p thu h·ªìi vai tr√≤ c·ªßa ng∆∞·ªùi d√πng.",
  },
  assign: {
    label: "G√°n",
    description: "Cho ph√©p g√°n {resource}.",
  },
};

const DETAIL_ACTIONS = new Set([
  "update",
  "delete",
  "restore",
  "hard-delete",
  "publish",
  "approve",
  "reject",
  "assign-role",
  "revoke-role",
]);

const toTitleCase = (value: string) =>
  value
    .split(/[-_ ]+/)
    .filter(Boolean)
    .map(
      (segment) => segment.charAt(0).toUpperCase() + segment.slice(1).toLowerCase(),
    )
    .join(" ");

const toSentenceCase = (value: string) => toTitleCase(value).toLowerCase();

const ensurePeriod = (value: string) => {
  const trimmed = value.trim();
  return trimmed.endsWith('.') ? trimmed : `${trimmed}.`;
};

const permissionResourceSpecs: PermissionResourceSpec[] = [
  {
    resource: 'dashboard',
    label: 'Dashboard',
    description: 'trang t·ªïng quan qu·∫£n tr·ªã',
    basePath: '/admin',
    actions: [
      { action: 'view', roles: ROLE_SETS.all, path: '/admin' },
      { action: 'analytics', roles: ROLE_SETS.adminAndSuper },
    ],
  },
  {
    resource: 'settings',
    label: 'C√†i ƒë·∫∑t h·ªá th·ªëng',
    description: 'c√°c c√†i ƒë·∫∑t h·ªá th·ªëng',
    basePath: '/admin/settings',
    actions: [
      { action: 'view', roles: ROLE_SETS.adminAndSuper },
      { action: 'update', roles: ROLE_SETS.superOnly },
      { action: 'system', roles: ROLE_SETS.superOnly },
      { action: 'security', roles: ROLE_SETS.superOnly },
    ],
  },
  {
    resource: 'profile',
    label: 'H·ªì s∆°',
    description: 'h·ªì s∆° t√†i kho·∫£n',
    basePath: '/admin/profile',
    actions: [
      { action: 'view', roles: ROLE_SETS.all },
      { action: 'update', roles: ROLE_SETS.all },
      { action: 'change-password', roles: ROLE_SETS.all },
      { action: 'upload-avatar', roles: ROLE_SETS.all },
    ],
  },
  {
    resource: 'billing',
    label: 'Thanh to√°n',
    description: 'thi·∫øt l·∫≠p thanh to√°n',
    basePath: '/admin/billing',
    actions: [
      { action: 'view', roles: ROLE_SETS.adminAndSuper },
      { action: 'update', roles: ROLE_SETS.superOnly },
      { action: 'manage-subscriptions', roles: ROLE_SETS.superOnly },
      { action: 'view-invoices', roles: ROLE_SETS.adminAndSuper },
    ],
  },
  {
    resource: 'notifications',
    label: 'Th√¥ng b√°o',
    description: 'c√°c th√¥ng b√°o h·ªá th·ªëng',
    basePath: '/admin/notifications',
    actions: [
      { action: 'view', roles: ROLE_SETS.all },
      { action: 'update', roles: ROLE_SETS.all },
      { action: 'mark-read', roles: ROLE_SETS.all },
      { action: 'delete', roles: ROLE_SETS.all },
    ],
  },
  {
    resource: 'sessions',
    label: 'Phi√™n ƒëƒÉng nh·∫≠p',
    description: 'c√°c phi√™n ƒëƒÉng nh·∫≠p',
    basePath: '/admin/sessions',
    actions: [
      { action: 'view', roles: ROLE_SETS.all },
      { action: 'manage', roles: ROLE_SETS.all },
      { action: 'revoke', roles: ROLE_SETS.all },
      { action: 'revoke-all', roles: ROLE_SETS.all },
    ],
  },
  {
    resource: 'upgrade',
    label: 'N√¢ng c·∫•p',
    description: 'ch·ª©c nƒÉng n√¢ng c·∫•p h·ªá th·ªëng',
    basePath: '/admin/upgrade',
    actions: [
      { action: 'view', roles: ROLE_SETS.all },
      { action: 'request', roles: ROLE_SETS.all },
      { action: 'manage', roles: ROLE_SETS.superOnly },
    ],
  },
  {
    resource: 'posts',
    label: 'B√†i vi·∫øt',
    description: 'c√°c b√†i vi·∫øt n·ªôi dung',
    basePath: '/admin/posts',
    detailPath: '/admin/posts/[id]',
    newPath: '/admin/posts/new',
    actions: [
      { action: 'view', roles: ROLE_SETS.editorial },
      { action: 'create', roles: ROLE_SETS.editorial },
      { action: 'update', roles: ROLE_SETS.editorial },
      { action: 'publish', roles: ROLE_SETS.adminAndSuper },
      { action: 'delete', roles: ROLE_SETS.adminAndSuper },
      { action: 'restore', roles: ROLE_SETS.adminAndSuper },
      { action: 'hard-delete', roles: ROLE_SETS.superOnly },
      { action: 'bulk-delete', roles: ROLE_SETS.adminAndSuper },
      { action: 'bulk-restore', roles: ROLE_SETS.adminAndSuper },
      { action: 'bulk-hard-delete', roles: ROLE_SETS.superOnly },
    ],
  },
  {
    resource: 'users',
    label: 'Ng∆∞·ªùi d√πng',
    description: 't√†i kho·∫£n ng∆∞·ªùi d√πng',
    basePath: '/admin/users',
    detailPath: '/admin/users/[id]',
    newPath: '/admin/users/new',
    actions: [
      { action: 'view', roles: ROLE_SETS.adminAndSuper },
      { action: 'create', roles: ROLE_SETS.superOnly },
      { action: 'update', roles: ROLE_SETS.superOnly },
      { action: 'delete', roles: ROLE_SETS.adminAndSuper },
      { action: 'restore', roles: ROLE_SETS.adminAndSuper },
      { action: 'hard-delete', roles: ROLE_SETS.superOnly },
      { action: 'bulk-delete', roles: ROLE_SETS.adminAndSuper },
      { action: 'bulk-restore', roles: ROLE_SETS.adminAndSuper },
      { action: 'bulk-hard-delete', roles: ROLE_SETS.superOnly },
      {
        action: 'assign-role',
        roles: ROLE_SETS.superOnly,
        displayName: 'G√°n vai tr√≤ cho ng∆∞·ªùi d√πng',
        description: 'Cho ph√©p g√°n vai tr√≤ cho ng∆∞·ªùi d√πng.',
      },
      {
        action: 'revoke-role',
        roles: ROLE_SETS.superOnly,
        displayName: 'Thu h·ªìi vai tr√≤ c·ªßa ng∆∞·ªùi d√πng',
        description: 'Cho ph√©p thu h·ªìi vai tr√≤ c·ªßa ng∆∞·ªùi d√πng.',
      },
    ],
  },
  {
    resource: 'roles',
    label: 'Vai tr√≤',
    description: 'c√°c vai tr√≤ ng∆∞·ªùi d√πng',
    basePath: '/admin/roles',
    detailPath: '/admin/roles/[id]',
    newPath: '/admin/roles/new',
    actions: [
      { action: 'view', roles: ROLE_SETS.adminAndSuper },
      { action: 'create', roles: ROLE_SETS.superOnly },
      { action: 'update', roles: ROLE_SETS.superOnly },
      { action: 'delete', roles: ROLE_SETS.superOnly },
      { action: 'restore', roles: ROLE_SETS.superOnly },
      { action: 'hard-delete', roles: ROLE_SETS.superOnly },
      { action: 'bulk-delete', roles: ROLE_SETS.superOnly },
      { action: 'bulk-restore', roles: ROLE_SETS.superOnly },
      { action: 'bulk-hard-delete', roles: ROLE_SETS.superOnly },
    ],
  },
  {
    resource: 'permissions',
    label: 'Quy·ªÅn h·ªá th·ªëng',
    description: 'c√°c quy·ªÅn h·ªá th·ªëng',
    basePath: '/admin/permissions',
    detailPath: '/admin/permissions/[id]',
    newPath: '/admin/permissions/new',
    actions: [
      { action: 'view', roles: ROLE_SETS.adminAndSuper },
      { action: 'create', roles: ROLE_SETS.superOnly },
      { action: 'update', roles: ROLE_SETS.superOnly },
      { action: 'delete', roles: ROLE_SETS.superOnly },
      { action: 'restore', roles: ROLE_SETS.superOnly },
      { action: 'hard-delete', roles: ROLE_SETS.superOnly },
      { action: 'bulk-delete', roles: ROLE_SETS.superOnly },
      { action: 'bulk-restore', roles: ROLE_SETS.superOnly },
      { action: 'bulk-hard-delete', roles: ROLE_SETS.superOnly },
      {
        action: 'assign',
        roles: ROLE_SETS.superOnly,
        displayName: 'G√°n quy·ªÅn h·ªá th·ªëng',
        description: 'Cho ph√©p g√°n c√°c quy·ªÅn h·ªá th·ªëng.',
      },
      {
        action: 'revoke',
        roles: ROLE_SETS.superOnly,
        displayName: 'Thu h·ªìi quy·ªÅn h·ªá th·ªëng',
        description: 'Cho ph√©p thu h·ªìi c√°c quy·ªÅn h·ªá th·ªëng.',
      },
      {
        action: 'manage',
        roles: ROLE_SETS.superOnly,
        displayName: 'Qu·∫£n l√Ω quy·ªÅn h·ªá th·ªëng',
        description: 'Cho ph√©p qu·∫£n l√Ω to√†n b·ªô quy·ªÅn h·ªá th·ªëng.',
      },
    ],
  },
  {
    resource: 'categories',
    label: 'Danh m·ª•c',
    description: 'c√°c danh m·ª•c n·ªôi dung',
    basePath: '/admin/categories',
    detailPath: '/admin/categories/[id]',
    newPath: '/admin/categories/new',
    actions: [
      { action: 'view', roles: ROLE_SETS.editorial },
      { action: 'create', roles: ROLE_SETS.editorial },
      { action: 'update', roles: ROLE_SETS.editorial },
      { action: 'moderate', roles: ROLE_SETS.editorial },
      { action: 'delete', roles: ROLE_SETS.adminAndSuper },
      { action: 'restore', roles: ROLE_SETS.adminAndSuper },
      { action: 'hard-delete', roles: ROLE_SETS.superOnly },
      { action: 'bulk-delete', roles: ROLE_SETS.adminAndSuper },
      { action: 'bulk-restore', roles: ROLE_SETS.adminAndSuper },
      { action: 'bulk-hard-delete', roles: ROLE_SETS.superOnly },
    ],
  },
  {
    resource: 'tags',
    label: 'Th·∫ª n·ªôi dung',
    description: 'c√°c th·∫ª n·ªôi dung',
    basePath: '/admin/tags',
    detailPath: '/admin/tags/[id]',
    newPath: '/admin/tags/new',
    actions: [
      { action: 'view', roles: ROLE_SETS.editorial },
      { action: 'create', roles: ROLE_SETS.editorial },
      { action: 'update', roles: ROLE_SETS.editorial },
      { action: 'delete', roles: ROLE_SETS.adminAndSuper },
      { action: 'restore', roles: ROLE_SETS.adminAndSuper },
      { action: 'hard-delete', roles: ROLE_SETS.superOnly },
      { action: 'bulk-delete', roles: ROLE_SETS.adminAndSuper },
      { action: 'bulk-restore', roles: ROLE_SETS.adminAndSuper },
      { action: 'bulk-hard-delete', roles: ROLE_SETS.superOnly },
    ],
  },
  {
    resource: 'comments',
    label: 'B√¨nh lu·∫≠n',
    description: 'c√°c b√¨nh lu·∫≠n ng∆∞·ªùi d√πng',
    basePath: '/admin/comments',
    detailPath: '/admin/comments/[id]',
    actions: [
      { action: 'view', roles: ROLE_SETS.editorial },
      { action: 'create', roles: ROLE_SETS.editorial },
      { action: 'update', roles: ROLE_SETS.editorial },
      { action: 'moderate', roles: ROLE_SETS.editorial },
      { action: 'approve', roles: ROLE_SETS.editorial },
      { action: 'reject', roles: ROLE_SETS.editorial },
      { action: 'delete', roles: ROLE_SETS.adminAndSuper },
      { action: 'restore', roles: ROLE_SETS.adminAndSuper },
      { action: 'hard-delete', roles: ROLE_SETS.superOnly },
      { action: 'bulk-delete', roles: ROLE_SETS.adminAndSuper },
      { action: 'bulk-restore', roles: ROLE_SETS.adminAndSuper },
      { action: 'bulk-hard-delete', roles: ROLE_SETS.superOnly },
      { action: 'bulk-approve', roles: ROLE_SETS.editorial },
      { action: 'bulk-reject', roles: ROLE_SETS.editorial },
    ],
  },
  {
    resource: 'trash',
    label: 'Th√πng r√°c',
    description: 'm·ª•c ƒë√£ x√≥a trong th√πng r√°c',
    basePath: '/admin/trash',
    actions: [
      { action: 'view', roles: ROLE_SETS.adminAndSuper },
      { action: 'restore', roles: ROLE_SETS.adminAndSuper },
      { action: 'delete', roles: ROLE_SETS.superOnly },
      { action: 'hard-delete', roles: ROLE_SETS.superOnly },
    ],
  },
];

const buildPermissionEntries = (): PermissionSeedDefinition[] => {
  const entries: PermissionSeedDefinition[] = [];

  for (const resourceSpec of permissionResourceSpecs) {
    for (const actionSpec of resourceSpec.actions) {
      const actionMeta =
        ACTION_METADATA[actionSpec.action] ?? {
          label: toTitleCase(actionSpec.action),
          description: `Cho ph√©p ${toSentenceCase(actionSpec.action)} {resource}.`,
        };

      const baseDisplayLabel = actionMeta.label || toTitleCase(actionSpec.action);
      const displayName =
        actionSpec.displayName ?? `${baseDisplayLabel} ${resourceSpec.label}`;

      const descriptionTemplate =
        actionSpec.description ?? actionMeta.description;

      const description = ensurePeriod(
        descriptionTemplate.includes('{resource}')
          ? descriptionTemplate.replace('{resource}', resourceSpec.description)
          : descriptionTemplate,
      );

      const uniqueRoles = Array.from(new Set(actionSpec.roles));

      const pathPattern =
        actionSpec.path ??
        (actionSpec.action === 'create' && resourceSpec.newPath
          ? resourceSpec.newPath
          : DETAIL_ACTIONS.has(actionSpec.action) && resourceSpec.detailPath
            ? resourceSpec.detailPath
            : resourceSpec.basePath);

      entries.push({
        name: `${resourceSpec.resource}:${actionSpec.action}`,
        displayName,
        description,
        resource: resourceSpec.resource,
        action: actionSpec.action,
        pathPattern,
        roles: uniqueRoles,
      });
    }
  }

  return entries;
};

const permissionEntries = buildPermissionEntries();

const resetDatabase = async () => {
  await prisma.$transaction(async (tx) => {
    await tx.rolePermission.deleteMany();
    await tx.userRole.deleteMany();
    await tx.session.deleteMany();
    await tx.comment.deleteMany();
    await tx.postTag.deleteMany();
    await tx.postCategory.deleteMany();
    await tx.post.deleteMany();
    await tx.tag.deleteMany();
    await tx.category.deleteMany();
    await tx.permission.deleteMany();
    await tx.roleModel.deleteMany();
    await tx.user.deleteMany();
  });
};

async function main() {
  console.log('üå± B·∫Øt ƒë·∫ßu seed database...');

  console.log('üßπ ƒêang x√≥a d·ªØ li·ªáu c≈©...');
  await resetDatabase();
  console.log('üßº ƒê√£ x√≥a d·ªØ li·ªáu c≈©');

  // T·∫°o roles
  const roles = await Promise.all([
    prisma.roleModel.upsert({
      where: { name: 'SUPER_ADMIN' },
      update: {},
      create: {
        name: 'SUPER_ADMIN',
        displayName: 'Super Administrator',
        description: 'To√†n quy·ªÅn h·ªá th·ªëng, c√≥ th·ªÉ th·ª±c hi·ªán m·ªçi thao t√°c',
      },
    }),
    prisma.roleModel.upsert({
      where: { name: 'ADMIN' },
      update: {},
      create: {
        name: 'ADMIN',
        displayName: 'Administrator',
        description: 'Qu·∫£n tr·ªã vi√™n, c√≥ quy·ªÅn qu·∫£n l√Ω n·ªôi dung v√† ng∆∞·ªùi d√πng',
      },
    }),
    prisma.roleModel.upsert({
      where: { name: 'EDITOR' },
      update: {},
      create: {
        name: 'EDITOR',
        displayName: 'Editor',
        description: 'Bi√™n t·∫≠p vi√™n, c√≥ quy·ªÅn t·∫°o v√† ch·ªânh s·ª≠a n·ªôi dung',
      },
    }),
    prisma.roleModel.upsert({
      where: { name: 'USER' },
      update: {},
      create: {
        name: 'USER',
        displayName: 'User',
        description: 'Ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng, quy·ªÅn h·∫°n h·∫°n ch·∫ø',
      },
    }),
    prisma.roleModel.upsert({
      where: { name: 'PARENT' },
      update: {},
      create: {
        name: 'PARENT',
        displayName: 'Parent',
        description: 'Ph·ª• huynh h·ªçc sinh, truy c·∫≠p c·ªïng th√¥ng tin ph·ª• huynh',
      },
    }),
  ]);

  console.log('‚úÖ ƒê√£ t·∫°o roles');

  // T·∫°o permissions d·ª±a tr√™n permission matrix
  const permissions = await Promise.all(
    permissionEntries.map(({ roles: _roles, ...permissionData }) =>
      prisma.permission.upsert({
        where: { name: permissionData.name },
        update: {
          displayName: permissionData.displayName,
          description: permissionData.description,
          resource: permissionData.resource,
          action: permissionData.action,
          pathPattern: permissionData.pathPattern,
          isActive: true,
        },
        create: {
          ...permissionData,
          isActive: true,
        },
      })
    )
  );

  console.log(`‚úÖ ƒê√£ t·∫°o permissions (${permissions.length})`);

  const permissionMap = new Map(permissions.map((permission) => [permission.name, permission]));
  const roleMap = new Map(roles.map((roleModel) => [roleModel.name, roleModel]));
  const rolePermissionsData: { roleId: string; permissionId: string }[] = [];

  for (const entry of permissionEntries) {
    const permissionRecord = permissionMap.get(entry.name);
    if (!permissionRecord) {
      continue;
    }

    const uniqueRoles = Array.from(new Set(entry.roles));
    for (const roleName of uniqueRoles) {
      const roleRecord = roleMap.get(roleName);
      if (!roleRecord) {
        continue;
      }

      rolePermissionsData.push({
        roleId: roleRecord.id,
        permissionId: permissionRecord.id,
      });
    }
  }

  await prisma.rolePermission.createMany({
    data: rolePermissionsData,
    skipDuplicates: true,
  });

  console.log(`‚úÖ ƒê√£ g√°n permissions cho roles (${rolePermissionsData.length})`);

  // T·∫°o users
  const hashedPassword = await bcrypt.hash('password123', 10);
  
  const adminUser = await prisma.user.upsert({
    where: { email: 'admin@hub.edu.vn' },
    update: {},
    create: {
      email: 'admin@hub.edu.vn',
      name: 'PQLCNTT Admin',
      password: hashedPassword,
      role: Role.SUPER_ADMIN,
    },
  });

  const editorUser = await prisma.user.upsert({
    where: { email: 'editor@hub.edu.vn' },
    update: {},
    create: {
      email: 'editor@hub.edu.vn',
      name: 'PQLCNTT Editor',
      password: hashedPassword,
      role: Role.EDITOR,
    },
  });

  const authorUser = await prisma.user.upsert({
    where: { email: 'author@hub.edu.vn' },
    update: {},
    create: {
      email: 'author@hub.edu.vn',
      name: 'PQLCNTT Author',
      password: hashedPassword,
      role: Role.USER,
    },
  });

  const parentUser = await prisma.user.upsert({
    where: { email: 'parent@hub.edu.vn' },
    update: {},
    create: {
      email: 'parent@hub.edu.vn',
      name: 'Ph·ª• huynh PQLCNTT',
      password: hashedPassword,
      role: Role.PARENT,
    },
  });

  // G√°n roles m·ªõi cho users
  await prisma.userRole.createMany({
    data: [
      {
        userId: adminUser.id,
        roleId: roles.find(r => r.name === 'SUPER_ADMIN')!.id,
      },
      {
        userId: editorUser.id,
        roleId: roles.find(r => r.name === 'EDITOR')!.id,
      },
      {
        userId: authorUser.id,
        roleId: roles.find(r => r.name === 'USER')!.id,
      },
      {
        userId: parentUser.id,
        roleId: roles.find(r => r.name === 'PARENT')!.id,
      },
    ],
    skipDuplicates: true,
  });

  console.log('‚úÖ ƒê√£ t·∫°o users');

  // T·∫°o categories
  const categories = await Promise.all([
    prisma.category.upsert({
      where: { slug: 'huong-dan' },
      update: {},
      create: {
        name: 'H∆∞·ªõng d·∫´n',
        slug: 'huong-dan',
        description: 'C√°c b√†i vi·∫øt h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng',
      },
    }),
    prisma.category.upsert({
      where: { slug: 'cong-nghe' },
      update: {},
      create: {
        name: 'C√¥ng ngh·ªá',
        slug: 'cong-nghe',
        description: 'Tin t·ª©c v√† xu h∆∞·ªõng c√¥ng ngh·ªá',
      },
    }),
    prisma.category.upsert({
      where: { slug: 'seo' },
      update: {},
      create: {
        name: 'SEO',
        slug: 'seo',
        description: 'T·ªëi ∆∞u h√≥a c√¥ng c·ª• t√¨m ki·∫øm',
      },
    }),
    prisma.category.upsert({
      where: { slug: 'ui-ux' },
      update: {},
      create: {
        name: 'UI/UX',
        slug: 'ui-ux',
        description: 'Thi·∫øt k·∫ø giao di·ªán v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng',
      },
    }),
  ]);

  console.log('‚úÖ ƒê√£ t·∫°o categories');

  // T·∫°o parents c√≥ li√™n k·∫øt user
  const parentOne = await prisma.parent.upsert({
    where: { email: 'parent@hub.edu.vn' },
    update: {
      userId: parentUser.id,
      fullName: 'Nguy·ªÖn VƒÉn Ph·ª• Huynh',
      phone: '0900123456',
      address: '123 ƒê∆∞·ªùng Trung T√¢m, Qu·∫≠n 1, TP.HCM',
    },
    create: {
      userId: parentUser.id,
      fullName: 'Nguy·ªÖn VƒÉn Ph·ª• Huynh',
      phone: '0900123456',
      email: 'parent@hub.edu.vn',
      address: '123 ƒê∆∞·ªùng Trung T√¢m, Qu·∫≠n 1, TP.HCM',
    },
  });

  const parentTwo = await prisma.parent.upsert({
    where: { email: 'parent2@hub.edu.vn' },
    update: {
      fullName: 'Tr·∫ßn Th·ªã Minh',
      phone: '0900222333',
      address: '456 ƒê∆∞·ªùng H·ªçc T·∫≠p, Qu·∫≠n B√¨nh Th·∫°nh, TP.HCM',
    },
    create: {
      fullName: 'Tr·∫ßn Th·ªã Minh',
      phone: '0900222333',
      email: 'parent2@hub.edu.vn',
      address: '456 ƒê∆∞·ªùng H·ªçc T·∫≠p, Qu·∫≠n B√¨nh Th·∫°nh, TP.HCM',
    },
  });

  const parentThree = await prisma.parent.upsert({
    where: { email: 'parent3@hub.edu.vn' },
    update: {
      fullName: 'L√™ Ho√†ng Anh',
      phone: '0900888777',
      address: '789 ƒê∆∞·ªùng Tri Th·ª©c, Qu·∫≠n 7, TP.HCM',
    },
    create: {
      fullName: 'L√™ Ho√†ng Anh',
      phone: '0900888777',
      email: 'parent3@hub.edu.vn',
      address: '789 ƒê∆∞·ªùng Tri Th·ª©c, Qu·∫≠n 7, TP.HCM',
    },
  });

  const parents = [parentOne, parentTwo, parentThree];

  console.log(`‚úÖ ƒê√£ t·∫°o parents (${parents.length})`);

  // T·∫°o tags
  const tags = await Promise.all([
    prisma.tag.upsert({
      where: { slug: 'content-editor' },
      update: {},
      create: {
        name: 'Content Editor',
        slug: 'content-editor',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'wysiwyg' },
      update: {},
      create: {
        name: 'WYSIWYG',
        slug: 'wysiwyg',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'lexical' },
      update: {},
      create: {
        name: 'Lexical',
        slug: 'lexical',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'react' },
      update: {},
      create: {
        name: 'React',
        slug: 'react',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'nextjs' },
      update: {},
      create: {
        name: 'Next.js',
        slug: 'nextjs',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'typescript' },
      update: {},
      create: {
        name: 'TypeScript',
        slug: 'typescript',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'nestjs' },
      update: {},
      create: {
        name: 'NestJS',
        slug: 'nestjs',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'prisma' },
      update: {},
      create: {
        name: 'Prisma',
        slug: 'prisma',
      },
    }),
  ]);

  console.log('‚úÖ ƒê√£ t·∫°o tags');

  // T·∫°o posts
  const post1 = await prisma.post.upsert({
    where: { slug: 'chao-mung-den-voi-content-editor' },
    update: {},
    create: {
      title: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Content Editor! üöÄ',
      content: samplePostContent,
      excerpt: 'ƒê√¢y l√† m·ªôt b√†i vi·∫øt m·∫´u ƒë∆∞·ª£c t·∫°o b·ªüi seed script. N·ªôi dung n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi Lexical Editor ƒë∆∞·ª£c s·ª≠ d·ª•ng trong core-cms.',
      slug: 'chao-mung-den-voi-content-editor',
      image: 'https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=800&h=400&fit=crop',
      published: true,
      publishedAt: new Date(),
      authorId: adminUser.id,
    },
  });

  const post2 = await prisma.post.upsert({
    where: { slug: 'huong-dan-su-dung-content-editor' },
    update: {},
    create: {
      title: 'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Content Editor',
      content: samplePostContent2,
      excerpt: 'Trong b√†i vi·∫øt n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng Content Editor m·ªôt c√°ch hi·ªáu qu·∫£ nh·∫•t.',
      slug: 'huong-dan-su-dung-content-editor',
      image: 'https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&h=400&fit=crop',
      published: true,
      publishedAt: new Date(),
      authorId: editorUser.id,
    },
  });

  const post3 = await prisma.post.upsert({
    where: { slug: 'tich-hop-lexical-voi-nestjs' },
    update: {},
    create: {
      title: 'T√≠ch h·ª£p Lexical v·ªõi NestJS v√† Prisma',
      content: samplePostContent,
      excerpt: 'H∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ c√°ch t√≠ch h·ª£p Lexical Editor v·ªõi NestJS backend v√† Prisma ORM.',
      slug: 'tich-hop-lexical-voi-nestjs',
      image: 'https://images.unsplash.com/photo-1551650975-87deedd944c3?w=800&h=400&fit=crop',
      published: true,
      authorId: authorUser.id,
    },
  });

  console.log('‚úÖ ƒê√£ t·∫°o posts');

  // Li√™n k·∫øt posts v·ªõi categories
  await prisma.postCategory.createMany({
    data: [
      { postId: post1.id, categoryId: categories[0].id }, // H∆∞·ªõng d·∫´n
      { postId: post1.id, categoryId: categories[1].id }, // C√¥ng ngh·ªá
      { postId: post2.id, categoryId: categories[0].id }, // H∆∞·ªõng d·∫´n
      { postId: post3.id, categoryId: categories[1].id }, // C√¥ng ngh·ªá
    ],
    skipDuplicates: true,
  });

  // Li√™n k·∫øt posts v·ªõi tags
  await prisma.postTag.createMany({
    data: [
      { postId: post1.id, tagId: tags[0].id }, // Content Editor
      { postId: post1.id, tagId: tags[1].id }, // WYSIWYG
      { postId: post1.id, tagId: tags[2].id }, // Lexical
      { postId: post1.id, tagId: tags[3].id }, // React
      { postId: post2.id, tagId: tags[0].id }, // Content Editor
      { postId: post2.id, tagId: tags[1].id }, // WYSIWYG
      { postId: post3.id, tagId: tags[2].id }, // Lexical
      { postId: post3.id, tagId: tags[6].id }, // NestJS
      { postId: post3.id, tagId: tags[7].id }, // Prisma
    ],
    skipDuplicates: true,
  });

  console.log('‚úÖ ƒê√£ li√™n k·∫øt posts v·ªõi categories v√† tags');

  // T·∫°o comments
  await prisma.comment.createMany({
    data: [
      {
        content: 'B√†i vi·∫øt r·∫•t hay v√† h·ªØu √≠ch! C·∫£m ∆°n t√°c gi·∫£ ƒë√£ chia s·∫ª.',
        approved: true,
        authorId: authorUser.id,
        postId: post1.id,
      },
      {
        content: 'T√¥i ƒë√£ th·ª≠ v√† th·∫•y r·∫•t d·ªÖ s·ª≠ d·ª•ng. Recommend cho m·ªçi ng∆∞·ªùi!',
        approved: true,
        authorId: editorUser.id,
        postId: post1.id,
      },
      {
        content: 'C√≥ th·ªÉ chia s·∫ª th√™m v·ªÅ c√°ch customize editor kh√¥ng?',
        approved: false,
        authorId: authorUser.id,
        postId: post2.id,
      },
    ],
  });

  console.log('‚úÖ ƒê√£ t·∫°o comments');

  // T·∫°o students v√† k·∫øt qu·∫£ h·ªçc t·∫≠p
  const studentOne = await prisma.student.upsert({
    where: { studentCode: 'STU-1001' },
    update: {
      parentId: parentOne.id,
      fullName: 'Nguy·ªÖn Minh Khoa',
      dateOfBirth: new Date('2012-09-01'),
      gender: Gender.MALE,
      className: '6A1',
      grade: 'L·ªõp 6',
      avatar: 'https://images.unsplash.com/photo-1524504388940-b1c1722653e1?w=400&h=400&fit=crop',
    },
    create: {
      parentId: parentOne.id,
      fullName: 'Nguy·ªÖn Minh Khoa',
      dateOfBirth: new Date('2012-09-01'),
      gender: Gender.MALE,
      studentCode: 'STU-1001',
      className: '6A1',
      grade: 'L·ªõp 6',
      avatar: 'https://images.unsplash.com/photo-1524504388940-b1c1722653e1?w=400&h=400&fit=crop',
    },
  });

  const studentTwo = await prisma.student.upsert({
    where: { studentCode: 'STU-1002' },
    update: {
      parentId: parentOne.id,
      fullName: 'Nguy·ªÖn Minh Th∆∞',
      dateOfBirth: new Date('2015-03-15'),
      gender: Gender.FEMALE,
      className: '3B2',
      grade: 'L·ªõp 3',
      avatar: 'https://images.unsplash.com/photo-1544716278-ca5e3f4abd8c?w=400&h=400&fit=crop',
    },
    create: {
      parentId: parentOne.id,
      fullName: 'Nguy·ªÖn Minh Th∆∞',
      dateOfBirth: new Date('2015-03-15'),
      gender: Gender.FEMALE,
      studentCode: 'STU-1002',
      className: '3B2',
      grade: 'L·ªõp 3',
      avatar: 'https://images.unsplash.com/photo-1544716278-ca5e3f4abd8c?w=400&h=400&fit=crop',
    },
  });

  const studentThree = await prisma.student.upsert({
    where: { studentCode: 'STU-1003' },
    update: {
      parentId: parentTwo.id,
      fullName: 'Ph·∫°m Quang Huy',
      dateOfBirth: new Date('2010-12-20'),
      gender: Gender.MALE,
      className: '9C1',
      grade: 'L·ªõp 9',
    },
    create: {
      parentId: parentTwo.id,
      fullName: 'Ph·∫°m Quang Huy',
      dateOfBirth: new Date('2010-12-20'),
      gender: Gender.MALE,
      studentCode: 'STU-1003',
      className: '9C1',
      grade: 'L·ªõp 9',
    },
  });

  const studentFour = await prisma.student.upsert({
    where: { studentCode: 'STU-1004' },
    update: {
      parentId: parentThree.id,
      fullName: 'L√™ B·∫£o Anh',
      dateOfBirth: new Date('2013-06-10'),
      gender: Gender.FEMALE,
      className: '5A3',
      grade: 'L·ªõp 5',
    },
    create: {
      parentId: parentThree.id,
      fullName: 'L√™ B·∫£o Anh',
      dateOfBirth: new Date('2013-06-10'),
      gender: Gender.FEMALE,
      studentCode: 'STU-1004',
      className: '5A3',
      grade: 'L·ªõp 5',
    },
  });

  const studentRecords = [studentOne, studentTwo, studentThree, studentFour];
  console.log('‚úÖ ƒê√£ t·∫°o students');

  if (studentRecords.some((student) => !student)) {
    throw new Error('‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c ƒë·ªß h·ªçc sinh m·∫´u.');
  }

  const createdStudents = await prisma.student.findMany({
    where: {
      studentCode: {
        in: ['STU-1001', 'STU-1002', 'STU-1003', 'STU-1004'],
      },
    },
    orderBy: { studentCode: 'asc' },
  });

  const studentMap = new Map(createdStudents.map((student) => [student.studentCode, student.id]));

  const academicResultsPayload = [
    {
      studentId: studentMap.get('STU-1001')!,
      subject: 'To√°n',
      semester: 'HK1',
      year: 2024,
      score: 8.5,
      grade: 'Gi·ªèi',
      notes: 'Ti·∫øn b·ªô r√µ r·ªát trong k·ª≥ thi gi·ªØa k·ª≥',
      teacherName: 'Th·∫ßy Nguy·ªÖn VƒÉn A',
    },
    {
      studentId: studentMap.get('STU-1001')!,
      subject: 'VƒÉn',
      semester: 'HK1',
      year: 2024,
      score: 8.0,
      grade: 'Kh√°',
      notes: 'C·∫ßn c·∫£i thi·ªán k·ªπ nƒÉng vi·∫øt ƒëo·∫°n vƒÉn ngh·ªã lu·∫≠n',
      teacherName: 'C√¥ Tr·∫ßn Th·ªã B',
    },
    {
      studentId: studentMap.get('STU-1002')!,
      subject: 'Ti·∫øng Anh',
      semester: 'HK1',
      year: 2024,
      score: 9.2,
      grade: 'Gi·ªèi',
      notes: 'Ph√°t √¢m t·ªët, c·∫ßn tƒÉng c∆∞·ªùng k·ªπ nƒÉng nghe',
      teacherName: 'C√¥ L√™ Th·ªã C',
    },
    {
      studentId: studentMap.get('STU-1003')!,
      subject: 'V·∫≠t l√Ω',
      semester: 'HK1',
      year: 2024,
      score: 7.5,
      grade: 'Kh√°',
      notes: 'C·∫ßn ch·ªß ƒë·ªông h∆°n trong c√°c b√†i th·ª±c h√†nh',
      teacherName: 'Th·∫ßy Ph·∫°m VƒÉn D',
    },
    {
      studentId: studentMap.get('STU-1004')!,
      subject: 'Khoa h·ªçc',
      semester: 'HK1',
      year: 2024,
      score: 8.8,
      grade: 'Gi·ªèi',
      notes: 'Th·ª±c h√†nh t·ªët, t√≠ch c·ª±c tham gia ho·∫°t ƒë·ªông nh√≥m',
      teacherName: 'C√¥ Nguy·ªÖn Th·ªã E',
    },
  ];

  await prisma.academicResult.createMany({
    data: academicResultsPayload,
    skipDuplicates: true,
  });

  console.log('‚úÖ ƒê√£ t·∫°o k·∫øt qu·∫£ h·ªçc t·∫≠p');

  if (studentRecords.some((student) => !student)) {
    throw new Error('‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh th√¥ng tin h·ªçc sinh sau khi t·∫°o.');
  }

  await prisma.message.createMany({
    data: [
      {
        senderId: parentOne.id,
        receiverId: parentTwo.id,
        subject: 'Th√¥ng b√°o h·ªçp ph·ª• huynh th√°ng 10',
        content:
          'K√≠nh g·ª≠i ph·ª• huynh, bu·ªïi h·ªçp ph·ª• huynh l·ªõp 6A1 s·∫Ω di·ªÖn ra v√†o l√∫c 8h s√°ng th·ª© 7 ng√†y 20/10.',
        isRead: false,
        type: MessageType.ANNOUNCEMENT,
        priority: Priority.NORMAL,
      },
      {
        senderId: parentTwo.id,
        receiverId: parentOne.id,
        subject: 'Th√¥ng b√°o h·ªçc ph√≠ th√°ng n√†y',
        content: 'Xin ch√†o ph·ª• huynh, vui l√≤ng ho√†n th√†nh h·ªçc ph√≠ th√°ng 10 tr∆∞·ªõc ng√†y 25/10.',
        isRead: false,
        type: MessageType.NOTIFICATION,
        priority: Priority.HIGH,
      },
      {
        senderId: parentThree.id,
        receiverId: parentOne.id,
        subject: 'Chia s·∫ª kinh nghi·ªám h·ªçc t·∫≠p',
        content: 'Ch√†o ph·ª• huynh, t√¥i mu·ªën chia s·∫ª m·ªôt s·ªë ph∆∞∆°ng ph√°p gi√∫p con t·ª± gi√°c h·ªçc b√†i hi·ªáu qu·∫£.',
        isRead: true,
        type: MessageType.PERSONAL,
        priority: Priority.LOW,
      },
    ],
  });

  console.log('‚úÖ ƒê√£ t·∫°o messages');

  console.log('üéâ Seed database ho√†n th√†nh!');
  console.log('\nüìä Th·ªëng k√™:');
  console.log(`- Roles: ${roles.length} (SUPER_ADMIN, ADMIN, EDITOR, USER, PARENT)`);
  console.log(`- Permissions: ${permissions.length} (t·∫•t c·∫£ permissions t·ª´ permission matrix)`);
  console.log(`- Users: 4 (1 Super Admin, 1 Editor, 1 User, 1 Parent)`);
  console.log(`- Categories: ${categories.length}`);
  console.log(`- Tags: ${tags.length}`);
  console.log(`- Posts: 3 (2 published, 1 draft)`);
  console.log(`- Comments: 3 (2 approved, 1 pending)`);
  console.log(`- Parents: ${parents.length}`);
  console.log(`- Students: ${createdStudents.length}`);
  console.log(`- Academic Results: ${academicResultsPayload.length}`);
  console.log(`- Messages: 3`);
  console.log('\nüîê Permission System:');
  console.log('‚úÖ SUPER_ADMIN: To√†n quy·ªÅn h·ªá th·ªëng');
  console.log('‚úÖ ADMIN: Qu·∫£n l√Ω n·ªôi dung v√† ng∆∞·ªùi d√πng');
  console.log('‚úÖ EDITOR: T·∫°o v√† ch·ªânh s·ª≠a n·ªôi dung');
  console.log('‚úÖ USER: Quy·ªÅn h·∫°n h·∫°n ch·∫ø');
  console.log('‚úÖ PARENT: Truy c·∫≠p c·ªïng th√¥ng tin ph·ª• huynh');
  console.log('\nüîë Th√¥ng tin ƒëƒÉng nh·∫≠p:');
  console.log('Email: admin@hub.edu.vn | Password: password123 (SUPER_ADMIN)');
  console.log('Email: editor@hub.edu.vn | Password: password123 (EDITOR)');
  console.log('Email: author@hub.edu.vn | Password: password123 (USER)');
  console.log('Email: parent@hub.edu.vn | Password: password123 (PARENT)');
}

main()
  .catch((e) => {
    console.error('‚ùå L·ªói khi seed database:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
